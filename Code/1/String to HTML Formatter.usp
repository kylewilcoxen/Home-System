/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Kyle Wilcoxen
Comments: This module is designed to work with the SKC SmartGraphics DynamicList SIMPL module.
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT cMAXITEMS 500
#CATEGORY "46" "Kyle's Modules" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   The program was created to function alongside the SKC SmartGraphics DynamicList SIMPL module.
#HELP_END

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
STRING_INPUT GlobalFontFace[30],GlobalFontColor[7],GlobalFontSize[2],GlobalFontAlign[7];
STRING_INPUT StringIn[cMAXITEMS][255]; 
 
STRING_OUTPUT StringOut[cMAXITEMS]; 

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
STRUCTURE _uItem
{
	STRING sLabel[255];
	STRING sFontFace[30];
	STRING sFontColor[7];
	STRING sFontSize[7];
    STRING sFontAlign[7];
};

_uItem uItem[cMAXITEMS];


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
Function fnSetLabels(INTEGER nIdx)
{
	MAKESTRING(StringOut[nIdx],"<P align=\x22%s\x22><FONT size=\x22%s\x22 face=\x22%s\x22 color=\x22%s\x22>%s</FONT></P>",
                                                                                               uItem[nIdx].sFontAlign,
                                                                                               uItem[nIdx].sFontSize,
																							   uItem[nIdx].sFontFace,
																							   uItem[nIdx].sFontColor,
																							   uItem[nIdx].sLabel);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
CHANGE GlobalFontFace
{
	INTEGER nLoop;

	FOR(nLoop=1 to cMAXITEMS)
		uItem[nLoop].sFontFace = GlobalFontFace;
}

CHANGE GlobalFontColor
{
	INTEGER nLoop;

	FOR(nLoop=1 to cMAXITEMS)
		uItem[nLoop].sFontColor = "#" + GlobalFontColor;
}

CHANGE GlobalFontSize
{
	INTEGER nLoop;

	FOR(nLoop=1 to cMAXITEMS)
		uItem[nLoop].sFontSize = GlobalFontSize;
}

CHANGE GlobalFontAlign
{
	INTEGER nLoop;

	FOR(nLoop=1 to cMAXITEMS)
		uItem[nLoop].sFontAlign = GlobalFontAlign;
}

CHANGE StringIn
{
    INTEGER nIdx;
	nIdx = GETLASTMODIFIEDARRAYINDEX();
	
	uItem[nIdx].sLabel = StringIn[nIdx];
	fnSetLabels(nIdx);
TRACE("ItemLabel Change\n");
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
}


